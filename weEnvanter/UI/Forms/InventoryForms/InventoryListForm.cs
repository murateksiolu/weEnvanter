using DevExpress.XtraBars;
using System.Windows.Forms;
using weEnvanter.Domain.Entities;
using weEnvanter.Business.Services;
using weEnvanter.Business.Services.Interfaces;
using System.Threading.Tasks;
using System;
using DevExpress.XtraEditors;
using weEnvanter.Core.Helpers;
using DevExpress.XtraBars.ToastNotifications;
using static weEnvanter.Core.Helpers.ToastNotificationHelper;
using weEnvanter.Domain.Enums;

namespace weEnvanter.UI.Forms.InventoryForms
{
    public partial class InventoryListForm : DevExpress.XtraEditors.XtraForm
    {
        private readonly IInventoryService _inventoryService;
        private readonly ToastNotificationsManager _toastNotificationsManager;

        public InventoryListForm(IInventoryService inventoryService)
        {
            InitializeComponent();
            _inventoryService = inventoryService;

            // Toast Notification Manager'ı başlat
            _toastNotificationsManager = ToastNotificationHelper.CreateManager(components);

            // This line of code is generated by Data Source Configuration Wizard
            pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Inventories;
            GridControlHelper.SetGridViewSettings(gridView1);
            BarManagerHelper.SetBarManagerSettings(barManager1);
        }

        private void btn_Add_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                using (var addInventoryForm = new AddOrEditInventoryForm(_inventoryService,OperationType.Add))
                {
                    if (addInventoryForm.ShowDialog() == DialogResult.OK)
                    {
                        pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Inventories;
                        pLinqServerModeSource1.Reload();
                        _toastNotificationsManager.ShowSuccess("Demirbaş başarıyla eklendi.");
                    }
                }
            }
            catch (Exception ex)
            {
                _toastNotificationsManager.ShowError("Demirbaş eklenirken bir hata oluştu.");
            }
        }

        private void btn_RefreshData_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Inventories;
                pLinqServerModeSource1.Reload();
                _toastNotificationsManager.ShowSuccess("Veriler başarıyla yenilendi.");
            }
            catch (Exception ex)
            {
                _toastNotificationsManager.ShowError("Veriler yenilenirken bir hata oluştu.");
            }
            finally
            {
                Cursor = Cursors.Default;
            }
        }

        private void btn_ExportXLSX_ItemClick(object sender, ItemClickEventArgs e)
        {
            Core.Helpers.ExportHelper.ExportToExcel(gridControl1, "weEnvanter_Demirbaş_Listesi");
        }

        private void btn_ExportPDF_ItemClick(object sender, ItemClickEventArgs e)
        {
            Core.Helpers.ExportHelper.ExportToPdf(gridControl1, "weEnvanter_Demirbaş_Listesi");
        }

        private void gridView1_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            if (e.Clicks == 2)
            {
                bar_Edit_ItemClick(null, null);
            }
        }

        private void bar_Edit_ItemClick(object sender, ItemClickEventArgs e)
        {
            var selectedRow = gridView1.GetFocusedRow() as Inventory;
            if (selectedRow != null)
            {
                try
                {
                    using (var editForm = new AddOrEditInventoryForm(_inventoryService,OperationType.Update,selectedRow.Id))
                    {
                        if (editForm.ShowDialog() == DialogResult.OK)
                        {
                            pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Inventories;
                            pLinqServerModeSource1.Reload();
                            _toastNotificationsManager.ShowSuccess("Demirbaş başarıyla güncellendi.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    _toastNotificationsManager.ShowError("Demirbaş güncellenirken bir hata oluştu.");
                }
            }
        }

        private async void bar_Delete_ItemClick(object sender, ItemClickEventArgs e)
        {
            var selectedRow = gridView1.GetFocusedRow() as Inventory;
            if (selectedRow != null)
            {
                try
                {
                    bool canBeDeleted = await _inventoryService.CanBeDeletedAsync(selectedRow.Id);
                    if (!canBeDeleted)
                    {
                        _toastNotificationsManager.ShowWarning("Bu demirbaş silinemez. Zimmetli olabilir veya bakım kayıtları olabilir.");
                        return;
                    }

                    if (XtraMessageBox.Show("Seçili demirbaşı silmek istediğinize emin misiniz?", "Silme Onayı",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        await _inventoryService.DeleteAsync(selectedRow.Id);
                        pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Inventories;
                        pLinqServerModeSource1.Reload();
                        _toastNotificationsManager.ShowSuccess("Demirbaş başarıyla silindi.");
                    }
                }
                catch (Exception ex)
                {
                    _toastNotificationsManager.ShowError("Silme işlemi sırasında bir hata oluştu.");
                }
            }
        }

        private void bar_EmbezzlementToEmployee_ItemClick(object sender, ItemClickEventArgs e)
        {
            var selectedRow = gridView1.GetFocusedRow() as Inventory;
            if (selectedRow != null)
            {
                try
                {
                    using (var embezzlementForm = new InventoryEmbezzlementForm(selectedRow.Id))
                    {
                        if (embezzlementForm.ShowDialog() == DialogResult.OK)
                        {
                            pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Inventories;
                            pLinqServerModeSource1.Reload();
                            _toastNotificationsManager.ShowSuccess("Zimmet işlemi başarıyla tamamlandı.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    _toastNotificationsManager.ShowError("Zimmet işlemi sırasında bir hata oluştu.");
                }
            }
        }

        private async void bar_RemoveFromEmbezzlement_ItemClick(object sender, ItemClickEventArgs e)
        {
            var selectedRow = gridView1.GetFocusedRow() as Inventory;
            if (selectedRow != null)
            {
                try
                {
                    if (XtraMessageBox.Show("Seçili demirbaşın zimmetini kaldırmak istediğinize emin misiniz?", "Zimmet Kaldırma Onayı",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        await _inventoryService.UnassignFromEmployeeAsync(selectedRow.Id);
                        pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Inventories;
                        pLinqServerModeSource1.Reload();
                        _toastNotificationsManager.ShowSuccess("Zimmet başarıyla kaldırıldı.");
                    }
                }
                catch (Exception ex)
                {
                    _toastNotificationsManager.ShowError("Zimmet kaldırma işlemi sırasında bir hata oluştu.");
                }
            }
        }

        private void bar_EmbezzlementHistory_ItemClick(object sender, ItemClickEventArgs e)
        {
            // Seçili demirbaşın zimmet geçmişini görüntüleme
            Inventory selectedRow = gridView1.GetFocusedRow() as Inventory;
            if (selectedRow != null)
            {
                var historyForm = new InventoryEmbezzlementHistoryForm(selectedRow.Id);
                historyForm.ShowDialog();
            }
        }
    }
}