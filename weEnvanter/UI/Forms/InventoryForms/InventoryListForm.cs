using DevExpress.XtraBars;
using System.Windows.Forms;
using weEnvanter.Domain.Entities;
using weEnvanter.Business.Services;
using weEnvanter.Business.Services.Interfaces;
using System.Threading.Tasks;
using System;

namespace weEnvanter.UI.Forms.InventoryForms
{
    public partial class InventoryListForm : DevExpress.XtraEditors.XtraForm
    {
        private readonly IInventoryService _inventoryService;

        public InventoryListForm(IInventoryService inventoryService)
        {
            InitializeComponent();
            _inventoryService = inventoryService;
            // This line of code is generated by Data Source Configuration Wizard
            pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Inventories;
        }

        private void btn_Add_ItemClick(object sender, ItemClickEventArgs e)
        {

        }

        private void btn_RefreshData_ItemClick(object sender, ItemClickEventArgs e)
        {
            pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Inventories;
            gridControl1.RefreshDataSource();
        }

        private void btn_ExportXLSX_ItemClick(object sender, ItemClickEventArgs e)
        {
            Core.Helpers.ExportHelper.ExportToExcel(gridControl1, "Demirbaş_Listesi");
        }

        private void btn_ExportPDF_ItemClick(object sender, ItemClickEventArgs e)
        {
            Core.Helpers.ExportHelper.ExportToPdf(gridControl1, "Demirbaş_Listesi");
        }

        private void gridView1_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                popupMenu1.ShowPopup(Cursor.Position);
            }
        }

        private void bar_Edit_ItemClick(object sender, ItemClickEventArgs e)
        {
            // Seçili satırdaki demirbaşı düzenlemek için form açılır
            Inventory selectedRow = gridView1.GetFocusedRow() as Inventory;
            if (selectedRow != null)
            {
                InventoryEditForm editForm = new InventoryEditForm(selectedRow.Id);
                if (editForm.ShowDialog() == DialogResult.OK)
                {
                    gridControl1.RefreshDataSource();
                }
            }
        }

        private async void bar_Delete_ItemClick(object sender, ItemClickEventArgs e)
        {
            var selectedRow = gridView1.GetFocusedRow() as Inventory;
            if (selectedRow != null)
            {
                try
                {
                    bool canBeDeleted = await _inventoryService.CanBeDeletedAsync(selectedRow.Id);
                    if (!canBeDeleted)
                    {
                        MessageBox.Show("Bu demirbaş silinemez. Zimmetli veya bakımda olabilir.", "Silme Hatası",
                            MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

                    if (MessageBox.Show("Seçili demirbaşı silmek istediğinize emin misiniz?", "Silme Onayı",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        await _inventoryService.DeleteAsync(selectedRow.Id);
                        gridControl1.RefreshDataSource();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Silme işlemi sırasında bir hata oluştu: {ex.Message}", "Hata",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void bar_EmbezzlementToEmployee_ItemClick(object sender, ItemClickEventArgs e)
        {
            // Seçili demirbaşı bir çalışana zimmetleme
            Inventory selectedRow = gridView1.GetFocusedRow() as Inventory;
            if (selectedRow != null)
            {
                var embezzlementForm = new InventoryEmbezzlementForm(selectedRow.Id);
                if (embezzlementForm.ShowDialog() == DialogResult.OK)
                {
                    gridControl1.RefreshDataSource();
                }
            }
        }

        private async void bar_RemoveFromEmbezzlement_ItemClick(object sender, ItemClickEventArgs e)
        {
            // Seçili demirbaşın zimmetini kaldırma
            Inventory selectedRow = gridView1.GetFocusedRow() as Inventory;
            if (selectedRow != null)
            {
                try
                {
                    if (MessageBox.Show("Seçili demirbaşın zimmetini kaldırmak istediğinize emin misiniz?", "Zimmet Kaldırma",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        await _inventoryService.UnassignFromEmployeeAsync(selectedRow.Id);
                        gridControl1.RefreshDataSource();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Zimmet kaldırma işlemi sırasında bir hata oluştu: {ex.Message}", "Hata",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void bar_EmbezzlementHistory_ItemClick(object sender, ItemClickEventArgs e)
        {
            // Seçili demirbaşın zimmet geçmişini görüntüleme
            Inventory selectedRow = gridView1.GetFocusedRow() as Inventory;
            if (selectedRow != null)
            {
                var historyForm = new InventoryEmbezzlementHistoryForm(selectedRow.Id);
                historyForm.ShowDialog();
            }
        }
    }
}