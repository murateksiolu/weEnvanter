using DevExpress.XtraEditors;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Windows.Forms;
using weEnvanter.Business.Services.Interfaces;
using weEnvanter.Core.Helpers;
using weEnvanter.Domain.Entities;
using weEnvanter.Domain.Enums;
using weEnvanter.UI.Forms.InventoryForms;
using DevExpress.XtraBars.ToastNotifications;
using static weEnvanter.Core.Helpers.ToastNotificationHelper;

namespace weEnvanter.UI.Forms.EmployeeForms
{
    public partial class EmployeeListForm : DevExpress.XtraEditors.XtraForm
    {
        private readonly IEmployeeService _employeeService;
        private readonly IInventoryService _inventoryService;
        private readonly ToastNotificationsManager _toastNotificationsManager;

        public EmployeeListForm()
        {
            InitializeComponent();
            _employeeService = Program.ServiceProvider.GetRequiredService<IEmployeeService>();
            _inventoryService = Program.ServiceProvider.GetRequiredService<IInventoryService>();
            
            // Toast Notification Manager'ı başlat
            _toastNotificationsManager = ToastNotificationHelper.CreateManager(components);

            // This line of code is generated by Data Source Configuration Wizard
            pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Employees;
            GridControlHelper.SetGridViewSettings(gridView_Employees);
            BarManagerHelper.SetBarManagerSettings(barManager1);
        }

        public void FilterByDepartment(int departmentId)
        {
            try
            {
                gridView_Employees.ActiveFilterString = $"[DepartmentId] = {departmentId}";
                gridView_Employees.ApplyColumnsFilter();
            }
            catch (Exception ex)
            {
                _toastNotificationsManager.ShowError("Departman filtresi uygulanırken bir hata oluştu.");
            }
        }

        private void bar_RefreshDataSource_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Employees;
                pLinqServerModeSource1.Reload();
                _toastNotificationsManager.ShowSuccess("Veriler başarıyla yenilendi.");
            }
            catch (Exception ex)
            {
                _toastNotificationsManager.ShowError("Veriler yenilenirken bir hata oluştu.");
            }
            finally
            {
                Cursor = Cursors.Default;
            }
        }

        private void bar_ExportPDF_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Core.Helpers.ExportHelper.ExportToPdf(gridControl_Employees, "weEnvanter_Çalışanlar");
        }

        private void bar_ExportXLSX_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Core.Helpers.ExportHelper.ExportToExcel(gridControl_Employees, "weEnvanter_Çalışanlar");
        }

        private void bar_AddNewEmployee_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                using (var addEmployeeForm = new AddOrEditEmployeeForm(_employeeService, OperationType.Add))
                {
                    if (addEmployeeForm.ShowDialog() == DialogResult.OK)
                    {
                        pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Employees;
                        pLinqServerModeSource1.Reload();
                        _toastNotificationsManager.ShowSuccess("Çalışan başarıyla eklendi.");
                    }
                }
            }
            catch (Exception ex)
            {
                _toastNotificationsManager.ShowError("Çalışan eklenirken bir hata oluştu.");
            }
        }

        private void btn_EditEmployee_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var selectedRow = gridView_Employees.GetFocusedRow() as Employee;
            if (selectedRow != null)
            {
                try
                {
                    using (var editForm = new AddOrEditEmployeeForm(_employeeService, OperationType.Update, selectedRow.Id))
                    {
                        if (editForm.ShowDialog() == DialogResult.OK)
                        {
                            pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Employees;
                            pLinqServerModeSource1.Reload();
                            _toastNotificationsManager.ShowSuccess("Çalışan başarıyla güncellendi.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    _toastNotificationsManager.ShowError("Çalışan güncellenirken bir hata oluştu.");
                }
            }
        }

        private async void btn_DeleteEmployee_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var selectedRow = gridView_Employees.GetFocusedRow() as Employee;
            if (selectedRow != null)
            {
                try
                {
                    bool canBeDeleted = await _employeeService.CanBeDeletedAsync(selectedRow.Id);
                    if (!canBeDeleted)
                    {
                        _toastNotificationsManager.ShowWarning("Bu çalışan silinemez. Zimmetli envanterleri olabilir.");
                        return;
                    }

                    if (XtraMessageBox.Show("Seçili çalışanı silmek istediğinize emin misiniz?", "Silme Onayı",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        await _employeeService.DeleteAsync(selectedRow.Id);
                        pLinqServerModeSource1.Reload();
                        _toastNotificationsManager.ShowSuccess("Çalışan başarıyla silindi.");
                    }
                }
                catch (Exception ex)
                {
                    _toastNotificationsManager.ShowError("Silme işlemi sırasında bir hata oluştu.");
                }
            }
        }

        private void btn_ShowEmbezzlement_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var selectedRow = gridView_Employees.GetFocusedRow() as Employee;
            if (selectedRow != null)
            {
                try
                {
                    using (var inventoryListForm = new InventoryListForm(_inventoryService))
                    {
                        // TODO: Burası da yapılacak.
                        //inventoryListForm.FilterByEmployee(selectedRow.Id);
                        inventoryListForm.ShowDialog();
                    }
                }
                catch (Exception ex)
                {
                    _toastNotificationsManager.ShowError("Zimmet listesi açılırken bir hata oluştu.");
                }
            }
        }

        private void btn_CreateEmbezzlementReport_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var selectedRow = gridView_Employees.GetFocusedRow() as Employee;
            if (selectedRow != null)
            {
                try
                {
                    // TODO: Zimmet raporu oluşturma işlemi eklenecek
                    _toastNotificationsManager.ShowWarning("Bu özellik henüz eklenmedi.");
                }
                catch (Exception ex)
                {
                    _toastNotificationsManager.ShowError("Rapor oluşturulurken bir hata oluştu.");
                }
            }
        }

        private void gridView_Employees_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            if(e.Button == MouseButtons.Right)
            {
                popupMenu1.ShowPopup(Cursor.Position);
            }
        }
    }
}