using System.Windows.Forms;
using DevExpress.XtraEditors;
using weEnvanter.UI.Forms.DepartmentForms;
using DevExpress.XtraPrinting;
using System;
using weEnvanter.Core.Helpers;
using weEnvanter.Business.Services.Interfaces;
using weEnvanter.Domain.Entities;
using weEnvanter.UI.Forms.EmployeeForms;
using weEnvanter.Domain.Enums;

namespace weEnvanter.UI.Forms.DepartmentForms
{
    public partial class DepartmentListForm : DevExpress.XtraEditors.XtraForm
    {
        private readonly IDepartmentService _departmentService;
        private readonly IEmployeeService _employeeService;

        public DepartmentListForm(IDepartmentService departmentService, IEmployeeService employeeService)
        {
            InitializeComponent();
            _departmentService = departmentService;
            _employeeService = employeeService;
            // This line of code is generated by Data Source Configuration Wizard
            pLinqServerModeSource1.Source = new weEnvanter.Data.WeEnvanterDbContext().Departments;
            GridControlHelper.SetGridViewSettings(gridView_Departments);
            BarManagerHelper.SetBarManagerSettings(barManager1);
        }

        private void gridView_Departments_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                popupMenu1.ShowPopup(Cursor.Position);
            }
        }

        private void btn_AddNewDepartment_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                using (var addDepartmentForm = new AddOrEditDepartmentForm(_departmentService, OperationType.Add))
                {
                    if (addDepartmentForm.ShowDialog() == DialogResult.OK)
                    {
                        pLinqServerModeSource1.Reload();
                        XtraMessageBox.Show("Departman başarıyla eklendi.", "Bilgi",
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show($"Departman eklenirken bir hata oluştu: {ex.Message}", "Hata",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btn_RefreshDataSource_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                Cursor = Cursors.WaitCursor;
                pLinqServerModeSource1.Reload();
                XtraMessageBox.Show("Veriler yenilendi.", "Bilgi",
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show($"Veriler yenilenirken bir hata oluştu: {ex.Message}", "Hata",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                Cursor = Cursors.Default;
            }
        }

        private void btn_ExportPDF_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Core.Helpers.ExportHelper.ExportToPdf(gridControl_Departments, "weEnvanter_Departmanlar");
        }

        private void btn_ExportXLSX_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Core.Helpers.ExportHelper.ExportToExcel(gridControl_Departments, "weEnvanter_Departmanlar");
        }

        private void bar_EditDepartment_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var selectedRow = gridView_Departments.GetFocusedRow() as Department;
            if (selectedRow != null)
            {
                try
                {
                    using (var editForm = new AddOrEditDepartmentForm(_departmentService, OperationType.Update, selectedRow.Id))
                    {
                        if (editForm.ShowDialog() == DialogResult.OK)
                        {
                            pLinqServerModeSource1.Reload();
                            XtraMessageBox.Show("Departman başarıyla güncellendi.", "Bilgi",
                                MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show($"Departman güncellenirken bir hata oluştu: {ex.Message}", "Hata",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private async void bar_Delete_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var selectedRow = gridView_Departments.GetFocusedRow() as Department;
            if (selectedRow != null)
            {
                try
                {
                    bool canBeDeleted = await _departmentService.CanBeDeletedAsync(selectedRow.Id);
                    if (!canBeDeleted)
                    {
                        XtraMessageBox.Show("Bu departman silinemez. Alt departmanları, çalışanları veya zimmetli envanterleri olabilir.", 
                            "Silme Hatası", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

                    if (XtraMessageBox.Show("Seçili departmanı silmek istediğinize emin misiniz?", "Silme Onayı",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        await _departmentService.DeleteAsync(selectedRow.Id);
                        pLinqServerModeSource1.Reload();
                        XtraMessageBox.Show("Departman başarıyla silindi.", "Bilgi",
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show($"Silme işlemi sırasında bir hata oluştu: {ex.Message}", "Hata",
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void bar_ShowEmployee_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var selectedRow = gridView_Departments.GetFocusedRow() as Department;
            if (selectedRow != null)
            {
                using (var employeeListForm = new EmployeeListForm(_employeeService))
                {
                    employeeListForm.FilterByDepartment(selectedRow.Id);
                    employeeListForm.ShowDialog();
                }
            }
        }
    }
}